[{"C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\index.js":"1","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\reportWebVitals.js":"2","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\App.js":"3","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\client\\Client.js":"4","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\Login.js":"5","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\context\\AuthProvider.js":"6","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\Messaggi.js":"7","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\client\\client.js":"8","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\context\\SocketProvider.js":"9","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\Conversazioni.js":"10","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\hooks\\useLocalStorage.js":"11","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\PrivateRoute.js":"12","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\ConnectedRoute.js":"13","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\ListaUtentiOnline.js":"14","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\TestComponent.js":"15","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\UserActions.js":"16","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\UtenteOnline.js":"17","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\hooks\\useWindowsSize.js":"18"},{"size":546,"mtime":1608577301088,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":1648,"mtime":1610897556572,"results":"22","hashOfConfig":"20"},{"size":1584,"mtime":1610744864860,"results":"23","hashOfConfig":"20"},{"size":1725,"mtime":1610307216270,"results":"24","hashOfConfig":"20"},{"size":2714,"mtime":1609793149197,"results":"25","hashOfConfig":"20"},{"size":5874,"mtime":1611508677500,"results":"26","hashOfConfig":"20"},{"size":2323,"mtime":1608640157681,"results":"27","hashOfConfig":"20"},{"size":2085,"mtime":1609966416392,"results":"28","hashOfConfig":"20"},{"size":16889,"mtime":1611524456167,"results":"29","hashOfConfig":"20"},{"size":3848,"mtime":1611437021645,"results":"30","hashOfConfig":"20"},{"size":774,"mtime":1609792773985,"results":"31","hashOfConfig":"20"},{"size":948,"mtime":1609787156725,"results":"32","hashOfConfig":"20"},{"size":3209,"mtime":1611437530454,"results":"33","hashOfConfig":"20"},{"size":3999,"mtime":1610031466155,"results":"34","hashOfConfig":"20"},{"size":2041,"mtime":1611242884241,"results":"35","hashOfConfig":"20"},{"size":1125,"mtime":1611437553004,"results":"36","hashOfConfig":"20"},{"size":602,"mtime":1611524003515,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1wz1hpj",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"40"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"40"},"C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\index.js",[],["91","92"],"C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\reportWebVitals.js",[],"C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\App.js",["93","94","95","96","97","98"],"import './App.css';\nimport Client from './client/Client';\nimport Login from './components/Login';\nimport PrivateRoute from './components/PrivateRoute'\nimport ConnectedRoute from './components/ConnectedRoute'\nimport TestComponent from './components/TestComponent'\n\nimport AuthProvider from './context/AuthProvider'\nimport SocketProvider from './context/SocketProvider'\nimport { Container, Button } from 'react-bootstrap'\n\nimport { useState, useEffect } from 'react';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link, Redirect\n} from \"react-router-dom\";\n\nimport { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\n\n\n\n\n/* \n\nTODO:\n  + gestire al meglio il routing, magari da capo con i file di backup\n    fare un routing in linea con sviluppi di app future\n\n  + simulazioni chat e test scimmia su ogni caso d'uso\n\n  + postgre: salvataggio Nuovi utenti in database\n  + postgre: salvataggio messaggi e definizione generale tabelle \n  \n\n\n*/\n\n\n\nfunction App() {\n\n\n  return (\n\n   <>\n      {/* <TestComponent /> */}\n      <Router history={history}>\n        <SocketProvider>\n          <AuthProvider>\n            <ConnectedRoute>\n\n              <Switch>\n\n                <Route exact path=\"/login\">\n                  <Login />\n                </Route>\n\n                <PrivateRoute path=\"/main\">\n                  <Client />\n                </PrivateRoute>\n\n                <Route path=\"/\">\n                  <Redirect to=\"/main\" />\n                </Route>\n\n              </Switch>\n\n            </ConnectedRoute>\n          </AuthProvider>\n        </SocketProvider>\n      </Router>\n</>\n  );\n}\n\nexport default App;","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\client\\Client.js",["99","100","101","102","103","104","105","106","107"],"import React, { useState, useEffect } from 'react'\r\nimport { Container, Nav, Button, Row, Col } from 'react-bootstrap'\r\nimport { useAuth } from \"../context/AuthProvider\";\r\nimport Conversazioni from '../components/Conversazioni'\r\n\r\nimport { useSocket } from \"../context/SocketProvider\";\r\n\r\n\r\n\r\n\r\nexport default function Client() {\r\n    const { user } = useAuth()\r\n\r\n    const [activePanel, setActivePanel] = useState(\"conversazioni\")\r\n    const { socketInfo } = useSocket()\r\n    const { socketId } = socketInfo\r\n\r\n\r\n    const renderPanel = () => {\r\n        switch (activePanel) {\r\n            case \"contatti\":\r\n                return \"I miei contatti, da implementare\"\r\n            case \"conversazioni\":\r\n                return <Conversazioni />\r\n            default:\r\n                return <Conversazioni />\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n\r\n            {/* <Nav className=\"justify-content-center\">\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey=\"contatti\" onClick={() => { setActivePanel(\"contatti\") }}>\r\n                            Contatti\r\n                            </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey=\"conversazioni\" onClick={() => { setActivePanel(\"conversazioni\") }}>\r\n                            Conversazioni\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav> */}\r\n\r\n\r\n            {/* {user.name && renderPanel()} */}\r\n            {user.name && <Conversazioni />}\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\Login.js",["108","109","110"],"import React, { useEffect, useRef } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { useAuth } from \"../context/AuthProvider\";\r\nimport { useSocket } from \"../context/SocketProvider\";\r\n\r\nexport default function Login() {\r\n    const { user, signin, signout } = useAuth()\r\n    const { socketInfo } = useSocket()\r\n    const { socketStatus, socketId } = socketInfo\r\n    const idRef = useRef()\r\n\r\n    let history = useHistory();\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        // qui potrebbe avvenire il controllo nella tabella user ???\r\n        // if (username === \"team5\" && password === \"123\") {\r\n        signin(idRef.current.value)\r\n        history.push(\"/main\")\r\n        idRef.current.value = \"\"\r\n        //}\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"Login d-flex justify-content-end align-items-center p-2\">\r\n\r\n\r\n                <Form onSubmit={(e) => handleSubmit(e)} className=\"d-flex align-items-center\">\r\n\r\n\r\n                    <Form.Control type=\"text\" required ref={idRef}\r\n                        placeholder=\"Inserisci ID\" />\r\n                    <Button type=\"submit\" variant=\"primary\" className=\"ml-2\">Login</Button>\r\n\r\n                    <Button type=\"submit\" variant=\"secondary\" className=\"ml-2\">Nuovo</Button>\r\n                </Form>\r\n                <>\r\n                    <h4 className=\"mr-4\">\r\n\r\n                    </h4>\r\n                </>\r\n\r\n            </div>\r\n            <div className=\"text-right mt-2\" >\r\n                {socketStatus === \"Connesso\" && <h5 className=\"mr-5\" style={{ color: \"darkgreen\" }}>{socketId}</h5>}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\context\\AuthProvider.js",["111","112","113","114"],"import React, { createContext, useState, useContext, useEffect, useReducer, useCallback } from 'react'\r\nimport { useCookies } from 'react-cookie'\r\nimport { useSocket } from \"../context/SocketProvider\";\r\n\r\nexport const authContext = createContext()\r\n\r\n//shorthands per utilizzare il contesto\r\nexport function useAuth() {\r\n    return useContext(authContext)\r\n}\r\n\r\n\r\n\r\nexport default function AuthProvider({ children }) {\r\n    const { socket, socketInfo } = useSocket()\r\n    const { socketStatus, socketId } = socketInfo\r\n\r\n    const [cookies, setCookie, removeCookie] = useCookies();\r\n\r\n    const initialUser = {\r\n        name: '',\r\n        socketId: ''\r\n    }\r\n    const [emit, setEmit] = useState({ type: \"welcome\", user: initialUser })\r\n\r\n    const reducer = (user, action) => {\r\n        let newUser\r\n        switch (action.type) {\r\n            case 'signin':\r\n                newUser = {\r\n                    ...user,\r\n                    name: action.payload,\r\n                //    id: Math.floor(Math.random() * (100)),\r\n                    socketId\r\n                }\r\n                setEmit({ type: action.type, user: newUser })       //socket.emit(action.type, newUser, (res) => console.log(res))\r\n                return newUser\r\n            case 'signout':\r\n                setEmit({ type: action.type, user: user })       // socket.emit(action.type, user, (res) => console.log(res))\r\n                newUser = {\r\n                    ...user,\r\n                    name: '',\r\n                    socketId: ''\r\n                }\r\n                return newUser\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    const [user, dispatch] = useReducer(reducer, initialUser);\r\n\r\n    const signin = (usernameValue) => {\r\n        const current = new Date()\r\n        current.setHours(current.getHours(), current.getMinutes() + 50, current.getSeconds()); //dopo un'ora\r\n        setCookie('user', usernameValue, { path: '/', expires: current });\r\n        dispatch({ type: 'signin', payload: usernameValue })\r\n    }\r\n\r\n    const signout = () => {\r\n        removeCookie('user')\r\n        dispatch({ type: 'signout' })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (cookies.user || user.name) {\r\n            dispatch({ type: 'signin', payload: cookies.user })\r\n        }\r\n    }, [socketId])\r\n\r\n    //invio messaggio al server al variare di emit (altrimenti fa invio doppio)\r\n    useEffect(() => {\r\n        socket.emit(emit.type, emit.user, (res) => console.log(res))\r\n    }, [emit])\r\n\r\n\r\n    const auth = {\r\n        user,\r\n        signin,\r\n        signout\r\n    }\r\n    return (\r\n        <authContext.Provider value={auth}>\r\n            {children}\r\n        </authContext.Provider>\r\n    )\r\n}\r\n","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\Messaggi.js",["115","116","117","118","119","120","121","122","123","124","125","126","127"],"import React, { Fragment, createRef, useRef, useState, useEffect } from 'react'\r\nimport { Container, Tab, Nav, Form, Button, Row, Col, Alert, Spinner } from 'react-bootstrap'\r\n\r\n\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment';\r\n\r\n\r\n//da implementare css messaggi https://codepen.io/swards/pen/gxQmbj\r\n\r\n\r\nexport default function Messaggi({ recipient, msgs, me, setMsgSent, msgText, setMsgText, moreMessages }) {\r\n    const revMsgs = msgs.reverse()\r\n    const [posHeader, setPosHeader] = useState(false)\r\n    const [lastMsgMod, setLastMsgMod] = useState(\"\")\r\n    const [currRecipient, setCurrRecipient] = useState(\"\")\r\n\r\n    const [showLoading, setShowLoading] = useState(false)\r\n    let timer\r\n\r\n\r\n    const init_msg = {\r\n        from: '',\r\n        to: '',\r\n        body: '',\r\n        time: '',\r\n        read: false\r\n    }\r\n\r\n    const lastMessage = createRef()\r\n    const msgBox = createRef()\r\n    const contactHeader = createRef()\r\n\r\n    let currMsg = { init_msg }\r\n\r\n    const headerStyleRelative = {\r\n        width: \"100%\",\r\n        opacity: \"1\"\r\n    }\r\n    const headerStyleFixed = {\r\n        opacity: \"0.5\"\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n\r\n\r\n\r\n        if (msgs.length > 0) {\r\n            setLastMsgMod(msgs[msgs.length - 1].time)\r\n        }\r\n    }, [msgs])\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(\"TRIGGER 2\")\r\n        //msgBox.current.scrollTop = msgBox.current.scrollHeight //carica direttamente in fondo al div referenziato da msgBox\r\n\r\n        lastMessage.current.scrollIntoView({ behavior: 'smooth' })\r\n    }, [lastMsgMod])\r\n\r\n\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        const msg = {\r\n            from: me,\r\n            to: recipient,\r\n            body: msgText,\r\n            time: moment().toString(), //necessario convertirlo in stringa poichè verrà usato come ID del messaggio assieme a from e to\r\n            read: false\r\n        }\r\n\r\n        setMsgSent({ recipient, msg })\r\n    }\r\n\r\n    const onScroll = (e) => {\r\n        msgBox.current.scrollTop > contactHeader.current.clientHeight ? setPosHeader(true) : setPosHeader(false)\r\n        if (msgs.length > 0) {\r\n            if (msgBox.current.scrollTop < 1) {\r\n                setShowLoading(true)\r\n                console.log(\"START TIMER\")\r\n                timer = setTimeout(() => {\r\n                    moreMessages()\r\n                    setShowLoading(false)\r\n                }, 2000)\r\n\r\n            }\r\n        }\r\n        else setLastMsgMod(\"\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(\"showLoading\", showLoading)\r\n        !showLoading && clearTimeout(timer)\r\n\r\n    }, [showLoading])\r\n\r\n    useEffect(() => {\r\n        console.log(\"recipient\", recipient)\r\n        setShowLoading(false)\r\n        clearTimeout(timer)\r\n        lastMessage.current.scrollIntoView({ behavior: 'smooth' })\r\n\r\n    }, [recipient])\r\n\r\n    return (\r\n        <div className=\"Messaggi d-flex flex-column w-100\" style={{ height: \"100vh\" }} >\r\n            <div ref={contactHeader} className=\"contactHeader p-4 m-0 d-flex justify-content-between\"\r\n                style={posHeader ? headerStyleFixed : headerStyleRelative}>\r\n                {recipient}\r\n                {showLoading && <Spinner animation=\"border\" variant=\"light\" className=\"spinnerLoadMsgs\" size=\"sm\" />}\r\n            </div>\r\n\r\n\r\n            <div ref={msgBox} className=\"MsgBox d-flex flex-column flex-grow-1 overflow-auto  \" onScroll={(e) => onScroll(e)}>\r\n\r\n\r\n                <div className=\"p-2 flex-grow-1 d-flex flex-column justify-content-end \">\r\n                    {revMsgs && revMsgs.map((msg, index) => {\r\n                        currMsg = {\r\n                            from: msg.from,\r\n                            to: msg.to,\r\n                            body: msg.body,\r\n                            time: msg.time\r\n\r\n                        }\r\n                        return (\r\n                            <div key={index} className={currMsg.from === me ? \"d-flex justify-content-end\" : \"d-flex justify-content-start\"}>\r\n                                {currMsg.from === me ?\r\n                                    <div className=\"mine message d-flex justify-content-between align-items-center\" >\r\n                                        <div>{msg.body}</div>\r\n                                        {msg.read && <i className=\"fa fa-check checkReadIcon ml-2\"></i>}\r\n                                    </div>\r\n                                    :\r\n                                    <div className=\"yours message \">\r\n                                        {msg.body}\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        )\r\n                    }\r\n                    )}\r\n\r\n                </div>\r\n\r\n                <div ref={lastMessage}>\r\n                    <Moment date={currMsg.time} //in questo momento currMsg è l'ultimo messaggio\r\n                        className={currMsg.from === me ? \"small-text d-flex justify-content-end\" : \"small-text d-flex justify-content-start\"}\r\n                        format=\"HH:mm:ss - DD-MM-YYYY\"\r\n                    />\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <div className=\"\">\r\n                <Form onSubmit={e => handleSubmit(e)} className=\"d-flex justify-content-between w-100\"  >\r\n                    <input className=\"inputMessage p-4 flex-grow-1 \"\r\n                        type=\"text\" value={msgText} onChange={e => setMsgText(e.target.value)}\r\n                        placeholder=\"Inserisci il messaggio...\"\r\n                        required />\r\n                    <Button type=\"submit\" className=\"buttonMessage pr-4 pl-4  \">\r\n                        <i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\r\n                    </Button>\r\n                </Form>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\client\\client.js",["128","129"],"C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\context\\SocketProvider.js",["130","131","132"],"import React, {\r\n    createContext, useState, useContext, useEffect,\r\n    useReducer, useCallback, useMemo\r\n} from 'react'\r\n\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst ENDPOINT = \"http://127.0.0.1:4001\";\r\nlet socket = socketIOClient(ENDPOINT, {\r\n    // autoConnect: false,\r\n    // reconnection: false,\r\n    // reconnecting: false,\r\n})\r\n\r\n\r\nexport const socketContext = createContext()\r\n\r\n//shorthands per utilizzare il contesto\r\nexport function useSocket() {\r\n    return useContext(socketContext)\r\n}\r\n\r\nexport default function SocketProvider({ children }) {\r\n\r\n    const [socketStatus, setSocketStatus] = useState('Non connesso')\r\n\r\n\r\n    const [socketId, setSocketId] = useState('')\r\n\r\n    const [newConnection, setNewConnection] = useState(false)\r\n\r\n\r\n    //da automatizzare con setInterval, ma genera errore non gestito se il server è spento\r\n    useEffect(() => {\r\n        if (newConnection) {\r\n            socket.connect()\r\n\r\n            setNewConnection(false)\r\n        }\r\n    }, [newConnection])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        socket.on('connect', function () {\r\n            console.log(\"connesso al server\")\r\n            setSocketStatus('Connesso')\r\n\r\n            setSocketId(socket.id)\r\n        });\r\n\r\n        socket.on('disconnect', (reason) => {\r\n            socket.disconnect()\r\n            socket.close();\r\n            setSocketStatus('Non connesso')\r\n\r\n            console.log(reason)\r\n            if (reason === 'io server disconnect') {\r\n                // the disconnection was initiated by the server, you need to reconnect manually\r\n            }\r\n            if (reason === 'transport close') {\r\n\r\n            }\r\n            // else the socket will automatically try to reconnect\r\n        });\r\n       \r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n    const socketInfo = {\r\n        socketStatus,\r\n        socketId\r\n    }\r\n\r\n\r\n    const socketValue = {\r\n        socket,\r\n        socketInfo,\r\n        setNewConnection,\r\n    }\r\n\r\n\r\n    return (\r\n        <socketContext.Provider value={socketValue}>\r\n            {children}\r\n        </socketContext.Provider>\r\n    )\r\n}\r\n","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\Conversazioni.js",["133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156"],"import React, { useState, useEffect, useReducer, useRef, useCallback } from 'react'\r\nimport { Container, Button, Alert, Row, Col } from 'react-bootstrap'\r\n\r\nimport { useAuth } from \"../context/AuthProvider\";\r\nimport { useSocket } from \"../context/SocketProvider\";\r\n\r\n\r\n\r\nimport useLocalStorage from '../hooks/useLocalStorage'\r\nimport useWindowsSize from '../hooks/useWindowsSize'\r\n\r\nimport ListaUtentiOnline from './ListaUtentiOnline'\r\nimport Messaggi from './Messaggi'\r\nimport UserActions from './UserActions'\r\n\r\nimport logo from \"../assets/img/chat2.svg\"\r\n\r\n\r\nfunction Conversazioni() {\r\n\r\n    const { user } = useAuth()\r\n    const { socket } = useSocket()\r\n    const { size } = useWindowsSize()\r\n    const { loadSingleConv, loadConv, loadAllConv, storeConv, storeMessageToConv } = useLocalStorage(\"conv-\" + user.name)\r\n\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [msgFrom, setMsgFrom] = useState(\"\");\r\n    const [msgIn, setMsgIn] = useState(\"\");\r\n    const [msgReadIn, setMsgReadIn] = useState(\"\");\r\n    const [userDisconnected, setUserDisconnected] = useState(\"\");\r\n    const [onlineUsers, setOnlineUsers] = useState([])\r\n    const [recipient, setRecipient] = useState('')\r\n    const [currMsgs, setCurrMsgs] = useState([])\r\n    const NUM_MSGS_TO_RENDER = 10\r\n    const [maxMsgsRender, setMaxMsgsRender] = useState(NUM_MSGS_TO_RENDER);\r\n    const [msgSent, setMsgSent] = useState(\"\");\r\n    const [msgText, setMsgText] = useState(\"\")\r\n    const [searchValue, setSearchValue] = useState(\"\")\r\n\r\n    const searchRef = useRef()\r\n\r\n    function reducer(conversation, action) {\r\n        let newConv, newSingleConv, indice, rec, msg, loadedConv\r\n        switch (action.type) {\r\n\r\n            case 'addMessageToConv':\r\n                rec = action.payload.rec\r\n                msg = action.payload.msg\r\n\r\n                newConv = {\r\n                    with: rec,\r\n                    msgs: [...conversation.msgs, msg]\r\n                }\r\n\r\n                //aggiorno la conversazione corrente\r\n\r\n                return newConv\r\n                break\r\n\r\n\r\n            case 'setSentMsgsRead':\r\n                const { fromUser } = action.payload\r\n\r\n                const newMsgs = [...conversation.msgs].map(m => {\r\n                    if (m.from === user.name) {\r\n                        return {\r\n                            ...m,\r\n                            read: true\r\n                        }\r\n                    }\r\n                    else {\r\n                        return {\r\n                            ...m\r\n                        }\r\n                    }\r\n                })\r\n\r\n                newConv = {\r\n                    with: conversation.with,\r\n                    msgs: newMsgs //contiene tutti i messaggi letti\r\n                }\r\n\r\n                // ... salvo la specifica converazione nel DB\r\n                storeConv(newConv, fromUser)\r\n\r\n                // ... aggiorno lo stato \r\n                return newConv\r\n                break\r\n\r\n\r\n            //contrassegna i messaggi ricevuti come letti e invia una notifica al server al termine, comunicando che\r\n            //l'utente ha letto tutti i messaggi con quell'utente\r\n            case 'setReceivedMsgsRead':\r\n                rec = action.payload.rec\r\n\r\n                const readMsgs = [...conversation.msgs].map(m => {\r\n                    let msgToRead = { ...m }\r\n\r\n\r\n\r\n                    //imposto letti solo i messaggi ricevuti ..\r\n                    if (m.from === rec) {\r\n                        //..che non sono ancora stati letti\r\n                        if (!m.read) {\r\n                            msgToRead = {\r\n                                ...m,\r\n                                read: true\r\n                            }\r\n                        }\r\n                    }\r\n                    return msgToRead\r\n                })\r\n\r\n                //ho impostato letti i messaggi ricevuti da with\r\n                socket.emit(\"msgAllReadOut\", { fromUser: user.name, withUser: rec })\r\n\r\n                newConv = {\r\n                    ...conversation,\r\n                    msgs: readMsgs\r\n                }\r\n\r\n                // ... salvo la specifica converazione nel DB\r\n                storeConv(newConv, rec)\r\n\r\n                // ... aggiorno lo stato\r\n                return newConv\r\n                break\r\n\r\n            // case 'OLDloadConv':\r\n            //     const onUsers = action.payload\r\n            //     newConv = [...conversations]\r\n\r\n            //     let newUserIndexArr = []\r\n\r\n            //     // console.log(\"conversations\", conversations)\r\n            //     // console.log(\"onUsers\", onUsers)\r\n\r\n            //     onUsers.forEach((u, index) => {\r\n            //         //se non trovo l'utente online tra le conversazioni caricate\r\n\r\n            //         if (!conversations.find(c => {\r\n            //             //console.log(\"!\", u.userName, c.with)\r\n            //             if (u.userName === conversation.with) return true\r\n            //             else return false\r\n\r\n            //         }))\r\n            //             //allora è nuovo e devo...\r\n            //             newUserIndexArr.push(index)\r\n            //     })\r\n            //     console.log(\"newUserIndexArr\", newUserIndexArr)\r\n\r\n            //     newUserIndexArr.map(newUserIndex => {\r\n            //         //...caricare la conversazione dal DB\r\n            //         const currNewUsername = onUsers[newUserIndex]\r\n            //         const c = loadSingleConv(currNewUsername)\r\n            //         if (c)\r\n            //             newConv = [...newConv, c]\r\n            //         else {\r\n            //             currNewUsername && storeConv({ with: currNewUsername, msgs: [] }, currNewUsername)\r\n            //             newConv = [...newConv, { with: currNewUsername, msgs: [] }]\r\n            //         }\r\n            //     })\r\n            //     return newConv\r\n            //     break\r\n            // case 'removeConv':\r\n            //     const userToRemove = action.payload\r\n            //     newConv = [...conversations]\r\n            //     newConv.splice(newConv.findIndex(c => (c.with === userToRemove)), 1)\r\n            //     return newConv\r\n            //     break\r\n\r\n            case 'loadConv':\r\n\r\n                rec = action.payload.rec\r\n\r\n                //quando cambio l'utente con cui chattare carico\r\n                loadedConv = loadSingleConv(rec)\r\n                //trovo e carico la conversazione dal DB\r\n                if (loadedConv) {\r\n                    //  recipient && dispatch({ type: 'setReceivedMsgsRead', payload: { recipient } })\r\n                    return loadedConv\r\n                }\r\n                else { //carico una conversazione vuota e preparo il DB\r\n\r\n                    return { with: rec, msgs: [] }\r\n                }\r\n\r\n\r\n                break\r\n\r\n            //non utilizzate\r\n            case 'clearConv':\r\n                return []\r\n                break\r\n            case 'loadAllConv':\r\n                return loadAllConv()\r\n                break\r\n            default:\r\n                throw new Error();\r\n                break\r\n        }\r\n    }\r\n\r\n    const [conv, dispatch] = useReducer(reducer, { with: '', msgs: [] });\r\n\r\n\r\n\r\n    /* TODO LETTURA MESSAGGI E CONTROLLO CHE AVVIENE TUTTO OK NEL DB */\r\n\r\n    useEffect(() => {\r\n        setMsgText(\"\")\r\n\r\n        // faccio una chiamata al server appena carico il componente ...\r\n        socket.emit(\"getOnlineUsers\", user.name, (res) => {\r\n            setOnlineUsers(Array.from(JSON.parse(res.data)))\r\n        })\r\n\r\n        //quando arriva un messaggio aggiorno stato e il db\r\n        socket.on('msgIn', (msg) => {\r\n            setMsgFrom(msg.from)\r\n            setMsgIn(msg)\r\n        })\r\n\r\n        socket.on('msgAllReadIn', ({ fromUser, withUser }) => {\r\n            setMsgReadIn({ fromUser, withUser })\r\n            //qui devo distinguere conversazione attiva e non attiva, come quando arriva un messaggio\r\n            //dispatch({ type: 'setSentMsgsRead', payload: { fromUser, withUser } })\r\n        })\r\n\r\n        socket.on('client_logout', (name) => {\r\n            console.log(name, \" ha abbandonato\")\r\n            setUserDisconnected(name)\r\n        })\r\n\r\n    }, [])\r\n\r\n    // ... la richiesta viene effettuata ogni 2 secondi per verificare se vi sono nuovi utenti connessi\r\n    // il timer viene distrutto quando il componente non viene visualizzato più, ad esempio cambiando scheda\r\n    // è utile per limitare le richieste, anziché impostare un timer direttamente nel provider della socket\r\n    // che tra l'altro causerebbe problemi di renderizzazione del componente creando una nuova socket.\r\n    // Devo usare una variabile di stato onlineUsers perchè è arincrona la chiamata al server\r\n    useEffect(() => {\r\n        const timerRequest = setInterval(() => {\r\n            socket.emit(\"getOnlineUsers\", user.name, (res) => {\r\n                setOnlineUsers(Array.from(JSON.parse(res.data)))\r\n            })\r\n        }, 1000); //tempo caricamento\r\n        return () => {\r\n            clearInterval(timerRequest)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (msgSent) {\r\n\r\n            const { recipient, msg } = msgSent\r\n            if (msg) {\r\n\r\n                dispatch({ type: 'addMessageToConv', payload: { rec: recipient, msg } })\r\n\r\n                socket.emit(\"msgOut\", msg)\r\n                storeMessageToConv(msg, msg.to)\r\n\r\n                setMsgText(\"\")\r\n            }\r\n        }\r\n\r\n    }, [msgSent])\r\n\r\n\r\n    useEffect(() => {\r\n        //al variare degli onlineUsers carico le conversazioni dal DB con gli utenti attualmente connessi\r\n        //dispatch({ type: 'loadConv', payload: onlineUsers })\r\n\r\n    }, [onlineUsers])\r\n\r\n\r\n    useEffect(() => {\r\n        msgFrom !== recipient ? setShowAlert(true) : setShowAlert(false)\r\n    }, [msgFrom])\r\n\r\n    useEffect(() => {\r\n        if (msgIn) {\r\n\r\n            //se mittente msg.from è il recipient attuale\r\n            if (msgIn.from === recipient) {\r\n\r\n                // allora devo aggiornare lo stato\r\n                dispatch({ type: 'addMessageToConv', payload: { rec: recipient, msg: msgIn } })\r\n                dispatch({ type: 'setReceivedMsgsRead', payload: { rec: recipient } })\r\n\r\n            }\r\n\r\n            storeMessageToConv(msgIn, msgIn.from)\r\n            setMsgIn(\"\")\r\n        }\r\n\r\n    }, [msgIn])\r\n\r\n    useEffect(() => {\r\n        if (msgReadIn) {\r\n\r\n            const { fromUser } = msgReadIn\r\n\r\n            //fromUser ha letto tutti i miei messaggi.\r\n            //se mittente msg.from è il recipient attuale\r\n            if (msgReadIn.fromUser === recipient) {\r\n                //La conversazione è già in memoria nello stato con lui e imposto i miei messaggi letti (quelli da me inviati) e salvo la conversazione\r\n                //aggiorno lo stato\r\n                dispatch({ type: 'setSentMsgsRead', payload: { fromUser } })\r\n            }\r\n            else {\r\n                //Carico la conversazione con lui e imposto i miei messaggi letti (quelli da me inviati) e salvo la conversazione\r\n                //non aggiorno lo stato\r\n                const loadedConv = loadSingleConv(fromUser)\r\n                let newConv //conterrà i messaggi letti\r\n                if (loadedConv) {\r\n                    const newMsgs = [...loadedConv.msgs].map(m => {\r\n                        if (m.from === user.name) {\r\n                            return {\r\n                                ...m,\r\n                                read: true\r\n                            }\r\n                        }\r\n                        else {\r\n                            return {\r\n                                ...m\r\n                            }\r\n                        }\r\n                    })\r\n                    newConv = {\r\n                        with: loadedConv.with,\r\n                        msgs: newMsgs //contiene tutti i messaggi letti\r\n                    }\r\n                    storeConv(newConv, fromUser)\r\n                }\r\n            }\r\n            setMsgIn(\"\")\r\n        }\r\n    }, [msgReadIn])\r\n\r\n    useEffect(() => {\r\n        //se il recipient corrente ha effettuato il logout imposto il suo valore come vuoto,\r\n        // in modo che non viene renderizzata la chat\r\n        recipient === userDisconnected && setRecipient('')\r\n        setUserDisconnected(\"\")\r\n        //    dispatch({ type: 'removeConv', payload: { userDisconnected } })\r\n    }, [userDisconnected])\r\n\r\n    useEffect(() => {\r\n        msgFrom === recipient && setShowAlert(false)\r\n\r\n        if (recipient) {\r\n            dispatch({ type: 'loadConv', payload: { rec: recipient } })\r\n\r\n            //console.log(\"setReceivedMsgsRead\",recipient )\r\n            dispatch({ type: 'setReceivedMsgsRead', payload: { rec: recipient } })\r\n        }\r\n\r\n        setMsgText(\"\")\r\n        setMaxMsgsRender(NUM_MSGS_TO_RENDER)\r\n\r\n    }, [recipient])\r\n\r\n\r\n    const moreMessages = () => {\r\n        setMaxMsgsRender(prevState => prevState + NUM_MSGS_TO_RENDER)\r\n    }\r\n\r\n    useEffect(() => {\r\n        //console.log(\"conv.msgs\", conv.msgs)\r\n        //   console.log(\"CONV \", conv, \"recipient\", recipient)\r\n\r\n        //ogni volta passo solo gli ultimi MAX_MSGS messaggi al componente Messaggi\r\n        setCurrMsgs(prevState => {\r\n            const start = conv.msgs.length - maxMsgsRender > 0 ? conv.msgs.length - maxMsgsRender : 0\r\n            const end = conv.msgs.length\r\n            let cutArr = conv.msgs.slice(start, end)\r\n            return cutArr\r\n        })\r\n\r\n    }, [conv])\r\n\r\n    useEffect(() => {\r\n        setCurrMsgs(prevState => {\r\n            const start = conv.msgs.length - maxMsgsRender > 0 ? conv.msgs.length - maxMsgsRender : 0\r\n            const end = conv.msgs.length\r\n            let cutArr = conv.msgs.slice(start, end)\r\n            return cutArr\r\n        })\r\n    }, [maxMsgsRender])\r\n\r\n\r\n    /* PROVA CON REF E VAI AVANTI CON RESPONSIVE*/\r\n    let stylePanelRight = { display: \"flex\" }\r\n\r\n    useEffect(() => {\r\n        const [width, height] = size;\r\n        console.log(\"DIME\", width, height)\r\n        if (width < 576) {\r\n            stylePanelRight = {\r\n                dispay: \"none\"\r\n            }\r\n        }\r\n        else {\r\n            stylePanelRight = {\r\n                dispay: \"flex\"\r\n            }\r\n        }\r\n    }, [size])\r\n\r\nreturn (\r\n\r\n    <>\r\n        {showAlert && <div className=\"alertPopup\" onClick={() => setShowAlert(false)}>Nuovo messaggio da <strong>{msgFrom}</strong></div>}\r\n\r\n        <Row className=\"d-flex flex-row m-0 p-0\" style={{ height: \"100vh\" }}>\r\n\r\n            <Col sm={4} md={4} lg={3} id=\"panelLeft\" className=\"m-0 p-0 d-flex flex-column \" style={{ height: \"100vh\" }}>\r\n\r\n                <div className=\"UserActions d-flex flex-row mt-2 mb-2 p-2 justify-content-center align-content-center\" >\r\n                    <UserActions searchValue={searchValue} setSearchValue={setSearchValue} searchRef={searchRef} />\r\n                </div>\r\n\r\n                <div className=\"m-0 p-0 d-flex flex-column flex-grow-1 overflow-auto \">\r\n                    <ListaUtentiOnline\r\n                        recipient={recipient}\r\n                        setRecipient={setRecipient}\r\n                        onlineUsers={onlineUsers}\r\n                        conv={conv}\r\n                        searchValue={searchValue} setSearchValue={setSearchValue}\r\n                        searchRef={searchRef}\r\n                    />\r\n                </div>\r\n            </Col>\r\n\r\n            <Col sm={8} md={8} lg={9} id=\"panelRight\" className=\"m-0 p-0 flex-column flex-grow-1 bgblue \" style={stylePanelRight}>\r\n                {onlineUsers ?\r\n                    <>\r\n                        {recipient ?\r\n                            <Messaggi\r\n                                recipient={recipient}\r\n                                msgs={currMsgs.length > 0 ? currMsgs : []}\r\n                                me={user.name}\r\n                                setMsgSent={setMsgSent}\r\n                                msgText={msgText}\r\n                                setMsgText={setMsgText}\r\n                                dispatch={dispatch}\r\n                                moreMessages={moreMessages}\r\n                            />\r\n                            :\r\n                            <div className=\"HomePage d-flex flex-column align-items-center justify-content-center h-100\">\r\n                                {/* <i className=\"fa fa-comments homeIcon\"></i> */}\r\n                                <img src={logo} className=\"homeIcon\" />\r\n                                <h1 className=\"textShadow\">Hello!</h1>\r\n                            </div>\r\n                        }\r\n                    </>\r\n                    :\r\n                    <Alert variant=\"warning\">Non ci sono utenti loggati oltre a te!</Alert>\r\n                }\r\n            </Col>\r\n        </Row>\r\n    </>\r\n\r\n)\r\n}\r\n\r\nexport default Conversazioni\r\n","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\hooks\\useLocalStorage.js",["157","158","159","160","161","162"],"import React, { useState, useEffect } from 'react'\r\n\r\n\r\nexport default function useLocalStorage(key) {\r\n\r\n    // creo uno spazio nel local storage con un nome del tipo:   \"conv-userName-withName\"\r\n    // in modo che ad un differente login cambi userName e quindi l'insieme delle converazioni\r\n\r\n    const clearStorage = () => {\r\n        localStorage.clear()\r\n    }\r\n\r\n    const loadAllConv = () => {\r\n        const res = []\r\n        const allStoreKey = Array.from(Object.keys(localStorage))\r\n        allStoreKey.map((from) => {\r\n            const jsonValue = localStorage.getItem(from)\r\n            console.log(\"jsonValue\", jsonValue)\r\n            if (jsonValue != null) res.push(JSON.parse(jsonValue))\r\n        })\r\n        return res\r\n    }\r\n\r\n    //carica le conversazioni con gli user contenuti nell'array users. Restituisccce un array di conversazioni\r\n    const loadConv = (users) => {\r\n        const res = []\r\n        const allStoreKey = Array.from(Object.keys(localStorage))\r\n        if (Array.isArray(users)) {\r\n            users.map(user => {\r\n                const indice = allStoreKey.findIndex(el => el.substring(key.length + 1) === user.userName)\r\n                if (indice > -1) {\r\n                    const jsonValue = localStorage.getItem(key + \"-\" + user.userName)\r\n                    if (jsonValue != null) res.push(JSON.parse(jsonValue))\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            const indice = allStoreKey.findIndex(el => el.substring(key.length + 1) === users)\r\n            if (indice > -1) {\r\n                const jsonValue = localStorage.getItem(key + \"-\" + users)\r\n                if (jsonValue != null) res.push(JSON.parse(jsonValue))\r\n            }\r\n\r\n        }\r\n        return res\r\n    }\r\n\r\n\r\n    /* utilizzate */\r\n    const loadSingleConv = (username) => {\r\n        const jsonValue = localStorage.getItem(key + \"-\" + username)\r\n        if (jsonValue != null) return JSON.parse(jsonValue)\r\n        else return false\r\n    }\r\n\r\n\r\n    const storeConv = (conversation, recipient) => {\r\n        localStorage.setItem(key + \"-\" + recipient, JSON.stringify(conversation))\r\n    }\r\n\r\n    const storeMessageToConv = (msg, username) => {\r\n        let currConv\r\n\r\n        const oldConv = loadSingleConv(username)\r\n        if (oldConv) {\r\n            currConv = {\r\n                ...oldConv,\r\n                msgs: [...oldConv.msgs, msg]\r\n            }\r\n        }\r\n        else {\r\n            currConv = { with: username, msgs: [msg] }\r\n\r\n        }\r\n        localStorage.setItem(key + \"-\" + username, JSON.stringify(currConv))\r\n    }\r\n\r\n    const getLastMessage = (myName, username) => {\r\n        const loadedConv = loadSingleConv(username)\r\n        if (loadedConv && loadedConv.msgs.length > 0) {\r\n            const lastMsg = loadedConv.msgs[loadedConv.msgs.length - 1]\r\n            if (lastMsg.from === myName && lastMsg.read)\r\n                return (\r\n                    <>\r\n                        <i className=\"fa fa-check checkReadIcon small-text mr-1\"></i>\r\n                        { lastMsg.body}\r\n                    </>\r\n                )\r\n            else\r\n                return lastMsg.body\r\n        }\r\n        else return \"\"\r\n    }\r\n    const totMsgToRead = (myName, username, recipient) => {\r\n\r\n        let totMsgToRead = []\r\n        const loadedConv = loadSingleConv(username) \r\n        if (loadedConv) {\r\n            if (loadedConv.with !== recipient) {\r\n                totMsgToRead = loadedConv.msgs.filter(m => {\r\n                    if (m.read === false && m.from !== myName) {\r\n                        return true\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        return totMsgToRead.length\r\n    }\r\n\r\n    return {\r\n        loadSingleConv, loadConv, loadAllConv, storeConv, storeMessageToConv,\r\n        getLastMessage, totMsgToRead\r\n    }\r\n}\r\n\r\n","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\PrivateRoute.js",["163","164","165"],"\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nimport { useAuth } from \"../context/AuthProvider\";\r\n\r\nimport React, { useContext, useEffect, useState } from 'react'\r\n\r\nexport default function PrivateRoute({ children, ...rest }) {\r\n    const { user } = useAuth()\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={({ location }) =>\r\n                user.name ? (\r\n                    children\r\n                )\r\n                    : (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: { from: location }\r\n                            }}\r\n                        />\r\n                    )\r\n            }\r\n        />\r\n\r\n    );\r\n}","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\ConnectedRoute.js",["166","167","168","169"],"\r\nimport { Button } from \"react-bootstrap\"\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nimport { useSocket } from \"../context/SocketProvider\";\r\n\r\nimport React, { useContext, useEffect, useState } from 'react'\r\n\r\nexport default function ConnectedRoute({ children, ...rest }) {\r\n\r\n    const { socketInfo, setNewConnection } = useSocket()\r\n    const { socketStatus } = socketInfo\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={() =>\r\n                socketStatus === \"Connesso\" ? (\r\n                    children\r\n                ) : (\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <Button variant=\"warning\" className=\"mr-5 p-3 w-100\" onClick={() => {\r\n                            setNewConnection(true)\r\n                        }}>Connetti al server</Button>\r\n                        </div>\r\n\r\n                    )\r\n            }\r\n        />\r\n\r\n    );\r\n}","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\ListaUtentiOnline.js",["170","171","172","173","174","175","176","177","178"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { Nav, Alert, Row, Col, Badge } from 'react-bootstrap'\r\nimport { update } from \"jdenticon\";\r\n\r\nimport { useAuth } from \"../context/AuthProvider\";\r\nimport useLocalStorage from '../hooks/useLocalStorage'\r\n\r\n\r\nimport UtenteOnline from './UtenteOnline'\r\n\r\n\r\nexport default function ListaUtentiOnline({ recipient, setRecipient, onlineUsers, conv, searchValue, setSearchValue, searchRef }) {\r\n    const { user } = useAuth()\r\n    const { getLastMessage, totMsgToRead } = useLocalStorage(\"conv-\" + user.name)\r\n\r\n\r\n    useEffect(() => {\r\n        const timerAvatar = setInterval(() => {\r\n            const lista = document.querySelectorAll(\"div.usersList > canvas\");\r\n            lista.forEach(c => {\r\n                update(`#${c.id}`, c.id)\r\n            })\r\n        }, 500);\r\n\r\n        return () => {\r\n            clearInterval(timerAvatar)\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    const checkSearch = (username) => {\r\n        if (username.toUpperCase().includes(searchValue.toUpperCase())) return true\r\n        return false\r\n    }\r\n\r\n    // const getLastMessage = (name) => {\r\n    //     const c = conv.find(e => e.with === name)\r\n    //     if (c) {\r\n    //         if (c.msgs.length > 0) {\r\n    //             const lastMsg = c.msgs[c.msgs.length - 1]\r\n    //             if (lastMsg.from === user.name && lastMsg.read)\r\n    //                 return (\r\n    //                     <>\r\n    //                         <i className=\"fa fa-check checkReadIcon small-text mr-1\"></i>\r\n    //                         { lastMsg.body}\r\n    //                     </>\r\n    //                 )\r\n    //             else\r\n    //                 return lastMsg.body\r\n    //         }\r\n    //     }\r\n    //     else return \"\"\r\n    // }\r\n\r\n\r\n\r\n\r\n\r\n    // const totMsgToRead = (name) => {\r\n    //     let totMsgToRead = 0\r\n    //     const c = conv.find(e => e.with === name)\r\n    //     if (c) {\r\n    //         if (c.with !== recipient) {\r\n    //             totMsgToRead = c.msgs.filter(m => {\r\n    //                 if (m.read === false && m.from !== user.name) {\r\n    //                     return true\r\n    //                 }\r\n    //             })\r\n\r\n    //         }\r\n    //     }\r\n    //     return totMsgToRead.length\r\n    // }\r\n\r\n    return (\r\n\r\n        <div id=\"UtentiOnline\" className=\"d-flex flex-column\">\r\n            <div className=\"text-center pb-2 small-text\">Online: {onlineUsers.length}</div>\r\n\r\n            {onlineUsers.map((el, index) => (\r\n\r\n                checkSearch(el.userName) &&\r\n\r\n                <div key={index} className={recipient === el.userName ?\r\n                    \"usersList contactLink d-flex align-items-center justify-content-between  contactActive \" :\r\n                    \"usersList contactLink d-flex align-items-center justify-content-between \"}\r\n                    onClick={() => {\r\n                        setRecipient(el.userName)\r\n                        setSearchValue(\"\")\r\n                        searchRef.current.value = \"\"\r\n                    }}>\r\n\r\n\r\n                    <UtenteOnline userName={el.userName} recipient={recipient} />\r\n\r\n                </div>\r\n            ))}\r\n        </div>\r\n\r\n    )\r\n}\r\n","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\TestComponent.js",["179","180","181","182","183","184","185","186","187","188"],"import React, { useState, useRef, useEffect, useReducer } from 'react'\r\nimport { Container, Tab, Nav, Form, Button, Row, Col, Alert } from 'react-bootstrap'\r\nimport useLocalStorage from '../hooks/useLocalStorage'\r\n\r\n\r\nfunction TestComponent() {\r\n    const msgRef = useRef()\r\n    const recipientRef = useRef()\r\n    const [loadConv, loadAllConv, storeConv, clearStorage] = useLocalStorage('conv')\r\n\r\n\r\n    function reducer(conversations, action) {\r\n        switch (action.type) {\r\n            case 'addMessageToConv':\r\n                const { recipient, msg } = action.payload\r\n\r\n                const newArrayConv = [...conversations]\r\n                let newSingleConv = {\r\n                    with: recipient,\r\n                    msgs: [msg]\r\n                }\r\n                let indice = conversations.findIndex(c => {\r\n                    if (c.with === recipient) {\r\n                        newSingleConv = {\r\n                            with: c.with,\r\n                            msgs: [...c.msgs, msg]\r\n                        }\r\n                        return true\r\n                    }\r\n                })\r\n\r\n\r\n                if (indice > -1) {\r\n                    newArrayConv.splice(indice, 1, newSingleConv)\r\n                    return newArrayConv\r\n                }\r\n                else\r\n                    return [\r\n                        ...newArrayConv,\r\n                        newSingleConv\r\n                    ]\r\n\r\n            case 'clearConv':\r\n                return []\r\n            case 'loadAllConv':\r\n                return loadAllConv()\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    const [conv, dispatch] = useReducer(reducer, []);\r\n\r\n    // const storeConvWith = (recipient) => {\r\n    //     const convToStore = conv.find(c => c.with === recipient)\r\n    //     storeConv(convToStore, recipient)\r\n    // }\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        const recipient = recipientRef.current.value\r\n        const msg = msgRef.current.value\r\n\r\n        dispatch({ type: 'addMessageToConv', payload: { recipient, msg } })\r\n\r\n\r\n        recipientRef.current.value = \"\"\r\n        msgRef.current.value = \"\"\r\n    }\r\n\r\n    useEffect(() => {\r\n       // conv.map(c => storeConv(c, c.with))\r\n    }, [conv])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"danger\" onClick={() => { dispatch({ type: 'clearConv' }) }}>clear</Button>\r\n            <Button variant=\"success\" onClick={() => {dispatch({ type: 'loadConv' })}}>CARICA CONVERSAZIONI</Button>\r\n            <Button variant=\"danger\" onClick={() => clearStorage()}>CLEAR STORAGE</Button>\r\n\r\n            <Form onSubmit={e => handleSubmit(e)} className=\"d-flex justify-content-between\">\r\n\r\n                <input className=\"inputMessage p-4 \"\r\n                    type=\"text\" ref={recipientRef}\r\n                    placeholder=\"Nome\"\r\n                    required />\r\n\r\n                <input className=\"inputMessage mt-4 p-4 \"\r\n                    type=\"text\" ref={msgRef}\r\n                    placeholder=\"Messaggio\"\r\n                    required />\r\n\r\n\r\n                <Button type=\"submit\" variant=\"success\" className=\"buttonMessage\">Invia</Button>\r\n            </Form>\r\n\r\n\r\n            <div className=\"ml-4 mt-4\">\r\n                {conv ?\r\n                    conv.map((c, index) => (\r\n                        <div className=\"d-flex border\" key={index}>\r\n                            <div className=\"flex-grow-1\"><strong>{c.with}</strong></div>\r\n                            <div className=\"flex-grow-1\">\r\n                                {c.msgs.map((msg, index) => (\r\n                                    <div key={index}>{msg}</div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    ))\r\n                    :\r\n                    <h4>Non ci sono messaggi</h4>\r\n                }\r\n\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default TestComponent\r\n","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\UserActions.js",["189","190","191"],"import React, { useState, useEffect } from 'react'\r\nimport { Button } from 'react-bootstrap'\r\n\r\nimport { useAuth } from \"../context/AuthProvider\";\r\nimport { update } from \"jdenticon\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction UserActions({ searchValue, setSearchValue, searchRef }) {\r\n    const { user, signout } = useAuth()\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const timerAvatar = setInterval(() => {\r\n            update(\"#myAvatar\", user.name)\r\n        }, 500);\r\n\r\n        return () => {\r\n            clearInterval(timerAvatar)\r\n        }\r\n    }, [])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n    }\r\n    const handleChange = (e) => {\r\n        setSearchValue(e.target.value)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column w-100  \">\r\n            <div className=\"\">\r\n                <div className=\"d-flex flex-column align-items-center \">\r\n                    <div className=\"d-flex\">\r\n                        <canvas id=\"myAvatar\" className=\"m-2 canvasAvatarUsername\" width=\"70\" height=\"70\"></canvas>\r\n                        <div className=\"buttonLogout ml-2\" onClick={() => {\r\n                            history.push(\"/login\");\r\n                            signout()\r\n                        }}><i className=\"fa fa-times\"></i>\r\n                        </div>\r\n                    </div>\r\n                    <h3 className=\"wrapWord   w-100 text-center  \">{user.name}</h3>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <form onSubmit={e => handleSubmit(e)}>\r\n                <div className=\"searchUserOnline mt-2\">\r\n                    <input type=\"text\" className=\"searchBar\" placeholder=\"Search...\"\r\n                        onChange={(e) => { handleChange(e) }} ref={searchRef} />\r\n                    <div className=\"searchButtonIcon\">\r\n                        <i className=\"fa fa-search\"></i>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserActions\r\n","C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\components\\UtenteOnline.js",["192","193","194","195","196","197","198","199"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { Nav, Alert, Row, Col, Badge } from 'react-bootstrap'\r\nimport { update } from \"jdenticon\";\r\n\r\nimport { useAuth } from \"../context/AuthProvider\";\r\nimport useLocalStorage from '../hooks/useLocalStorage'\r\n\r\n\r\nexport default function UtenteOnline({ userName, recipient }) {\r\n    const { user } = useAuth()\r\n    const { getLastMessage, totMsgToRead } = useLocalStorage(\"conv-\" + user.name)\r\n\r\n    return (\r\n\r\n        <>\r\n            <canvas id={userName} width=\"45\" height=\"45\" className=\"canvasAvatarUsers d-flex\"></canvas>\r\n            <div className=\" d-flex flex-column flex-grow-1 minWidthZero\">\r\n                <div className=\"ml-3 wrapDots\">{userName}</div>\r\n                <div className=\"ml-3 small-text wrapDots\">{getLastMessage(user.name, userName)}</div>\r\n            </div>\r\n\r\n            <div>\r\n                <Badge variant=\"info\" className=\"p-2\">\r\n                    {totMsgToRead(user.name, userName, recipient) > 0 && totMsgToRead(user.name, userName, recipient)}\r\n                </Badge>\r\n            </div>\r\n        </>\r\n\r\n\r\n\r\n    )\r\n}\r\n",["200","201"],"C:\\Users\\Luca\\Desktop\\Front_end_dev\\Progetti\\live_chat\\src\\hooks\\useWindowsSize.js",["202"],"import React, { useEffect, useState } from 'react';\r\n\r\nexport default function useWindowSize() {\r\n    const [size, setSize] = useState([0, 0]);\r\n\r\n    useEffect(() => {\r\n        function updateSize() {\r\n            setSize([window.innerWidth, window.innerHeight]);\r\n        }\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n\r\n\r\n    // function ShowWindowDimensions() {\r\n    //     const [width, height] = useWindowSize();\r\n        \r\n        \r\n    // }\r\n\r\n\r\n    return { size }\r\n\r\n}\r\n\r\n",{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":6,"column":8,"nodeType":"209","messageId":"210","endLine":6,"endColumn":21},{"ruleId":"207","severity":1,"message":"211","line":10,"column":10,"nodeType":"209","messageId":"210","endLine":10,"endColumn":19},{"ruleId":"207","severity":1,"message":"212","line":10,"column":21,"nodeType":"209","messageId":"210","endLine":10,"endColumn":27},{"ruleId":"207","severity":1,"message":"213","line":12,"column":10,"nodeType":"209","messageId":"210","endLine":12,"endColumn":18},{"ruleId":"207","severity":1,"message":"214","line":12,"column":20,"nodeType":"209","messageId":"210","endLine":12,"endColumn":29},{"ruleId":"207","severity":1,"message":"215","line":19,"column":3,"nodeType":"209","messageId":"210","endLine":19,"endColumn":7},{"ruleId":"207","severity":1,"message":"214","line":1,"column":27,"nodeType":"209","messageId":"210","endLine":1,"endColumn":36},{"ruleId":"207","severity":1,"message":"211","line":2,"column":10,"nodeType":"209","messageId":"210","endLine":2,"endColumn":19},{"ruleId":"207","severity":1,"message":"216","line":2,"column":21,"nodeType":"209","messageId":"210","endLine":2,"endColumn":24},{"ruleId":"207","severity":1,"message":"212","line":2,"column":26,"nodeType":"209","messageId":"210","endLine":2,"endColumn":32},{"ruleId":"207","severity":1,"message":"217","line":2,"column":34,"nodeType":"209","messageId":"210","endLine":2,"endColumn":37},{"ruleId":"207","severity":1,"message":"218","line":2,"column":39,"nodeType":"209","messageId":"210","endLine":2,"endColumn":42},{"ruleId":"207","severity":1,"message":"219","line":14,"column":25,"nodeType":"209","messageId":"210","endLine":14,"endColumn":39},{"ruleId":"207","severity":1,"message":"220","line":16,"column":13,"nodeType":"209","messageId":"210","endLine":16,"endColumn":21},{"ruleId":"207","severity":1,"message":"221","line":19,"column":11,"nodeType":"209","messageId":"210","endLine":19,"endColumn":22},{"ruleId":"207","severity":1,"message":"214","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":26},{"ruleId":"207","severity":1,"message":"222","line":9,"column":13,"nodeType":"209","messageId":"210","endLine":9,"endColumn":17},{"ruleId":"207","severity":1,"message":"223","line":9,"column":27,"nodeType":"209","messageId":"210","endLine":9,"endColumn":34},{"ruleId":"207","severity":1,"message":"224","line":1,"column":77,"nodeType":"209","messageId":"210","endLine":1,"endColumn":88},{"ruleId":"207","severity":1,"message":"225","line":16,"column":13,"nodeType":"209","messageId":"210","endLine":16,"endColumn":25},{"ruleId":"226","severity":1,"message":"227","line":69,"column":8,"nodeType":"228","endLine":69,"endColumn":18,"suggestions":"229"},{"ruleId":"226","severity":1,"message":"230","line":74,"column":8,"nodeType":"228","endLine":74,"endColumn":14,"suggestions":"231"},{"ruleId":"207","severity":1,"message":"232","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":25},{"ruleId":"207","severity":1,"message":"233","line":1,"column":38,"nodeType":"209","messageId":"210","endLine":1,"endColumn":44},{"ruleId":"207","severity":1,"message":"211","line":2,"column":10,"nodeType":"209","messageId":"210","endLine":2,"endColumn":19},{"ruleId":"207","severity":1,"message":"234","line":2,"column":21,"nodeType":"209","messageId":"210","endLine":2,"endColumn":24},{"ruleId":"207","severity":1,"message":"216","line":2,"column":26,"nodeType":"209","messageId":"210","endLine":2,"endColumn":29},{"ruleId":"207","severity":1,"message":"217","line":2,"column":45,"nodeType":"209","messageId":"210","endLine":2,"endColumn":48},{"ruleId":"207","severity":1,"message":"218","line":2,"column":50,"nodeType":"209","messageId":"210","endLine":2,"endColumn":53},{"ruleId":"207","severity":1,"message":"235","line":2,"column":55,"nodeType":"209","messageId":"210","endLine":2,"endColumn":60},{"ruleId":"207","severity":1,"message":"236","line":16,"column":12,"nodeType":"209","messageId":"210","endLine":16,"endColumn":25},{"ruleId":"207","severity":1,"message":"237","line":16,"column":27,"nodeType":"209","messageId":"210","endLine":16,"endColumn":43},{"ruleId":"226","severity":1,"message":"238","line":61,"column":8,"nodeType":"228","endLine":61,"endColumn":20,"suggestions":"239"},{"ruleId":"226","severity":1,"message":"240","line":100,"column":8,"nodeType":"228","endLine":100,"endColumn":21,"suggestions":"241"},{"ruleId":"226","severity":1,"message":"242","line":108,"column":8,"nodeType":"228","endLine":108,"endColumn":19,"suggestions":"243"},{"ruleId":"207","severity":1,"message":"234","line":2,"column":21,"nodeType":"209","messageId":"210","endLine":2,"endColumn":24},{"ruleId":"207","severity":1,"message":"244","line":9,"column":11,"nodeType":"209","messageId":"210","endLine":9,"endColumn":19},{"ruleId":"207","severity":1,"message":"245","line":3,"column":5,"nodeType":"209","messageId":"210","endLine":3,"endColumn":15},{"ruleId":"207","severity":1,"message":"224","line":3,"column":17,"nodeType":"209","messageId":"210","endLine":3,"endColumn":28},{"ruleId":"207","severity":1,"message":"246","line":3,"column":30,"nodeType":"209","messageId":"210","endLine":3,"endColumn":37},{"ruleId":"207","severity":1,"message":"224","line":1,"column":58,"nodeType":"209","messageId":"210","endLine":1,"endColumn":69},{"ruleId":"207","severity":1,"message":"211","line":2,"column":10,"nodeType":"209","messageId":"210","endLine":2,"endColumn":19},{"ruleId":"207","severity":1,"message":"212","line":2,"column":21,"nodeType":"209","messageId":"210","endLine":2,"endColumn":27},{"ruleId":"207","severity":1,"message":"247","line":24,"column":29,"nodeType":"209","messageId":"210","endLine":24,"endColumn":37},{"ruleId":"207","severity":1,"message":"248","line":43,"column":22,"nodeType":"209","messageId":"210","endLine":43,"endColumn":35},{"ruleId":"207","severity":1,"message":"249","line":43,"column":37,"nodeType":"209","messageId":"210","endLine":43,"endColumn":43},{"ruleId":"250","severity":1,"message":"251","line":58,"column":17,"nodeType":"252","messageId":"253","endLine":58,"endColumn":22},{"ruleId":"250","severity":1,"message":"251","line":88,"column":17,"nodeType":"252","messageId":"253","endLine":88,"endColumn":22},{"ruleId":"250","severity":1,"message":"251","line":127,"column":17,"nodeType":"252","messageId":"253","endLine":127,"endColumn":22},{"ruleId":"250","severity":1,"message":"251","line":189,"column":17,"nodeType":"252","messageId":"253","endLine":189,"endColumn":22},{"ruleId":"250","severity":1,"message":"251","line":194,"column":17,"nodeType":"252","messageId":"253","endLine":194,"endColumn":22},{"ruleId":"250","severity":1,"message":"251","line":197,"column":17,"nodeType":"252","messageId":"253","endLine":197,"endColumn":22},{"ruleId":"250","severity":1,"message":"251","line":200,"column":17,"nodeType":"252","messageId":"253","endLine":200,"endColumn":22},{"ruleId":"226","severity":1,"message":"254","line":235,"column":8,"nodeType":"228","endLine":235,"endColumn":10,"suggestions":"255"},{"ruleId":"226","severity":1,"message":"256","line":268,"column":8,"nodeType":"228","endLine":268,"endColumn":17,"suggestions":"257"},{"ruleId":"226","severity":1,"message":"258","line":280,"column":8,"nodeType":"228","endLine":280,"endColumn":17,"suggestions":"259"},{"ruleId":"226","severity":1,"message":"260","line":298,"column":8,"nodeType":"228","endLine":298,"endColumn":15,"suggestions":"261"},{"ruleId":"226","severity":1,"message":"262","line":340,"column":8,"nodeType":"228","endLine":340,"endColumn":19,"suggestions":"263"},{"ruleId":"226","severity":1,"message":"258","line":348,"column":8,"nodeType":"228","endLine":348,"endColumn":26,"suggestions":"264"},{"ruleId":"226","severity":1,"message":"265","line":363,"column":8,"nodeType":"228","endLine":363,"endColumn":19,"suggestions":"266"},{"ruleId":"226","severity":1,"message":"267","line":382,"column":8,"nodeType":"228","endLine":382,"endColumn":14,"suggestions":"268"},{"ruleId":"226","severity":1,"message":"269","line":391,"column":8,"nodeType":"228","endLine":391,"endColumn":23,"suggestions":"270"},{"ruleId":"226","severity":1,"message":"271","line":401,"column":31,"nodeType":"272","endLine":403,"endColumn":14},{"ruleId":"273","severity":1,"message":"274","line":454,"column":33,"nodeType":"275","endLine":454,"endColumn":72},{"ruleId":"207","severity":1,"message":"213","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":25},{"ruleId":"207","severity":1,"message":"214","line":1,"column":27,"nodeType":"209","messageId":"210","endLine":1,"endColumn":36},{"ruleId":"207","severity":1,"message":"276","line":9,"column":11,"nodeType":"209","messageId":"210","endLine":9,"endColumn":23},{"ruleId":"277","severity":1,"message":"278","line":16,"column":32,"nodeType":"279","messageId":"280","endLine":16,"endColumn":34},{"ruleId":"277","severity":1,"message":"278","line":29,"column":28,"nodeType":"279","messageId":"280","endLine":29,"endColumn":30},{"ruleId":"277","severity":1,"message":"281","line":101,"column":57,"nodeType":"279","messageId":"282","endLine":101,"endColumn":59},{"ruleId":"207","severity":1,"message":"283","line":6,"column":17,"nodeType":"209","messageId":"210","endLine":6,"endColumn":27},{"ruleId":"207","severity":1,"message":"214","line":6,"column":29,"nodeType":"209","messageId":"210","endLine":6,"endColumn":38},{"ruleId":"207","severity":1,"message":"213","line":6,"column":40,"nodeType":"209","messageId":"210","endLine":6,"endColumn":48},{"ruleId":"207","severity":1,"message":"284","line":3,"column":17,"nodeType":"209","messageId":"210","endLine":3,"endColumn":25},{"ruleId":"207","severity":1,"message":"283","line":7,"column":17,"nodeType":"209","messageId":"210","endLine":7,"endColumn":27},{"ruleId":"207","severity":1,"message":"214","line":7,"column":29,"nodeType":"209","messageId":"210","endLine":7,"endColumn":38},{"ruleId":"207","severity":1,"message":"213","line":7,"column":40,"nodeType":"209","messageId":"210","endLine":7,"endColumn":48},{"ruleId":"207","severity":1,"message":"213","line":1,"column":28,"nodeType":"209","messageId":"210","endLine":1,"endColumn":36},{"ruleId":"207","severity":1,"message":"233","line":1,"column":38,"nodeType":"209","messageId":"210","endLine":1,"endColumn":44},{"ruleId":"207","severity":1,"message":"216","line":2,"column":10,"nodeType":"209","messageId":"210","endLine":2,"endColumn":13},{"ruleId":"207","severity":1,"message":"235","line":2,"column":15,"nodeType":"209","messageId":"210","endLine":2,"endColumn":20},{"ruleId":"207","severity":1,"message":"217","line":2,"column":22,"nodeType":"209","messageId":"210","endLine":2,"endColumn":25},{"ruleId":"207","severity":1,"message":"218","line":2,"column":27,"nodeType":"209","messageId":"210","endLine":2,"endColumn":30},{"ruleId":"207","severity":1,"message":"285","line":2,"column":32,"nodeType":"209","messageId":"210","endLine":2,"endColumn":37},{"ruleId":"207","severity":1,"message":"286","line":14,"column":13,"nodeType":"209","messageId":"210","endLine":14,"endColumn":27},{"ruleId":"207","severity":1,"message":"287","line":14,"column":29,"nodeType":"209","messageId":"210","endLine":14,"endColumn":41},{"ruleId":"207","severity":1,"message":"213","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":25},{"ruleId":"207","severity":1,"message":"211","line":2,"column":10,"nodeType":"209","messageId":"210","endLine":2,"endColumn":19},{"ruleId":"207","severity":1,"message":"234","line":2,"column":21,"nodeType":"209","messageId":"210","endLine":2,"endColumn":24},{"ruleId":"207","severity":1,"message":"216","line":2,"column":26,"nodeType":"209","messageId":"210","endLine":2,"endColumn":29},{"ruleId":"207","severity":1,"message":"217","line":2,"column":45,"nodeType":"209","messageId":"210","endLine":2,"endColumn":48},{"ruleId":"207","severity":1,"message":"218","line":2,"column":50,"nodeType":"209","messageId":"210","endLine":2,"endColumn":53},{"ruleId":"207","severity":1,"message":"235","line":2,"column":55,"nodeType":"209","messageId":"210","endLine":2,"endColumn":60},{"ruleId":"207","severity":1,"message":"247","line":9,"column":12,"nodeType":"209","messageId":"210","endLine":9,"endColumn":20},{"ruleId":"207","severity":1,"message":"288","line":9,"column":35,"nodeType":"209","messageId":"210","endLine":9,"endColumn":44},{"ruleId":"277","severity":1,"message":"289","line":22,"column":56,"nodeType":"279","messageId":"282","endLine":22,"endColumn":58},{"ruleId":"207","severity":1,"message":"213","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":25},{"ruleId":"207","severity":1,"message":"212","line":2,"column":10,"nodeType":"209","messageId":"210","endLine":2,"endColumn":16},{"ruleId":"226","severity":1,"message":"290","line":20,"column":8,"nodeType":"228","endLine":20,"endColumn":10,"suggestions":"291"},{"ruleId":"207","severity":1,"message":"214","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":26},{"ruleId":"207","severity":1,"message":"213","line":1,"column":28,"nodeType":"209","messageId":"210","endLine":1,"endColumn":36},{"ruleId":"207","severity":1,"message":"233","line":1,"column":38,"nodeType":"209","messageId":"210","endLine":1,"endColumn":44},{"ruleId":"207","severity":1,"message":"216","line":2,"column":10,"nodeType":"209","messageId":"210","endLine":2,"endColumn":13},{"ruleId":"207","severity":1,"message":"235","line":2,"column":15,"nodeType":"209","messageId":"210","endLine":2,"endColumn":20},{"ruleId":"207","severity":1,"message":"217","line":2,"column":22,"nodeType":"209","messageId":"210","endLine":2,"endColumn":25},{"ruleId":"207","severity":1,"message":"218","line":2,"column":27,"nodeType":"209","messageId":"210","endLine":2,"endColumn":30},{"ruleId":"207","severity":1,"message":"292","line":3,"column":10,"nodeType":"209","messageId":"210","endLine":3,"endColumn":16},{"ruleId":"203","replacedBy":"293"},{"ruleId":"205","replacedBy":"294"},{"ruleId":"207","severity":1,"message":"295","line":1,"column":8,"nodeType":"209","messageId":"210","endLine":1,"endColumn":13},"no-native-reassign",["296"],"no-negated-in-lhs",["297"],"no-unused-vars","'TestComponent' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'Button' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'Nav' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'setActivePanel' is assigned a value but never used.","'socketId' is assigned a value but never used.","'renderPanel' is assigned a value but never used.","'user' is assigned a value but never used.","'signout' is assigned a value but never used.","'useCallback' is defined but never used.","'socketStatus' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cookies.user' and 'user.name'. Either include them or remove the dependency array.","ArrayExpression",["298"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["299"],"'Fragment' is defined but never used.","'useRef' is defined but never used.","'Tab' is defined but never used.","'Alert' is defined but never used.","'currRecipient' is assigned a value but never used.","'setCurrRecipient' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'lastMessage'. Either include it or remove the dependency array.",["300"],"React Hook useEffect has a missing dependency: 'timer'. Either include it or remove the dependency array.",["301"],"React Hook useEffect has missing dependencies: 'lastMessage' and 'timer'. Either include them or remove the dependency array.",["302"],"'panelRef' is assigned a value but never used.","'useReducer' is defined but never used.","'useMemo' is defined but never used.","'loadConv' is assigned a value but never used.","'newSingleConv' is defined but never used.","'indice' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","React Hook useEffect has missing dependencies: 'socket' and 'user.name'. Either include them or remove the dependency array.",["303"],"React Hook useEffect has missing dependencies: 'socket' and 'storeMessageToConv'. Either include them or remove the dependency array.",["304"],"React Hook useEffect has a missing dependency: 'recipient'. Either include it or remove the dependency array.",["305"],"React Hook useEffect has missing dependencies: 'recipient' and 'storeMessageToConv'. Either include them or remove the dependency array.",["306"],"React Hook useEffect has missing dependencies: 'loadSingleConv', 'recipient', 'storeConv', and 'user.name'. Either include them or remove the dependency array.",["307"],["308"],"React Hook useEffect has a missing dependency: 'msgFrom'. Either include it or remove the dependency array.",["309"],"React Hook useEffect has a missing dependency: 'maxMsgsRender'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurrMsgs' needs the current value of 'maxMsgsRender'.",["310"],"React Hook useEffect has a missing dependency: 'conv.msgs'. Either include it or remove the dependency array.",["311"],"Assignments to the 'stylePanelRight' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'clearStorage' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'useContext' is defined but never used.","'Redirect' is defined but never used.","'Badge' is defined but never used.","'getLastMessage' is assigned a value but never used.","'totMsgToRead' is assigned a value but never used.","'storeConv' is assigned a value but never used.","Array.prototype.findIndex() expects a value to be returned at the end of arrow function.","React Hook useEffect has a missing dependency: 'user.name'. Either include it or remove the dependency array.",["312"],"'update' is defined but never used.",["296"],["297"],"'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"327","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},"Update the dependencies array to be: [cookies.user, socketId, user.name]",{"range":"342","text":"343"},"Update the dependencies array to be: [emit, socket]",{"range":"344","text":"345"},"Update the dependencies array to be: [lastMessage, lastMsgMod]",{"range":"346","text":"347"},"Update the dependencies array to be: [showLoading, timer]",{"range":"348","text":"349"},"Update the dependencies array to be: [lastMessage, recipient, timer]",{"range":"350","text":"351"},"Update the dependencies array to be: [socket, user.name]",{"range":"352","text":"353"},"Update the dependencies array to be: [msgSent, socket, storeMessageToConv]",{"range":"354","text":"355"},"Update the dependencies array to be: [msgFrom, recipient]",{"range":"356","text":"357"},"Update the dependencies array to be: [msgIn, recipient, storeMessageToConv]",{"range":"358","text":"359"},"Update the dependencies array to be: [loadSingleConv, msgReadIn, recipient, storeConv, user.name]",{"range":"360","text":"361"},"Update the dependencies array to be: [recipient, userDisconnected]",{"range":"362","text":"363"},{"range":"364","text":"357"},"Update the dependencies array to be: [conv, maxMsgsRender]",{"range":"365","text":"366"},"Update the dependencies array to be: [conv.msgs, maxMsgsRender]",{"range":"367","text":"368"},"Update the dependencies array to be: [user.name]",{"range":"369","text":"370"},[2303,2313],"[cookies.user, socketId, user.name]",[2499,2505],"[emit, socket]",[1553,1565],"[lastMessage, lastMsgMod]",[2619,2632],"[showLoading, timer]",[2842,2853],"[lastMessage, recipient, timer]",[8233,8235],"[socket, user.name]",[9485,9494],"[msgSent, socket, storeMessageToConv]",[9828,9837],"[msgFrom, recipient]",[10348,10355],"[msgIn, recipient, storeMessageToConv]",[12049,12060],"[loadSingleConv, msgReadIn, recipient, storeConv, user.name]",[12416,12434],"[recipient, userDisconnected]",[12856,12867],[13493,13499],"[conv, maxMsgsRender]",[13808,13823],"[conv.msgs, maxMsgsRender]",[597,599],"[user.name]"]